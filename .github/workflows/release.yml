name: Release

on:
  push:
    tags:
      - 'v*.*.*'
      - 'v*.*.*-*'  # Support pre-release tags (alpha, beta, rc)

env:
  BUN_VERSION: '1.2.17'

jobs:
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    permissions:
      security-events: write
      contents: read

    steps:
      - name: 📦 Checkout code
        uses: actions/checkout@v4

      - name: 🔍 Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: 📊 Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: security-scan

    permissions:
      contents: write
      packages: write
      security-events: write
    
    steps:
      - name: 📦 Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: 🏗️ Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: ${{ env.BUN_VERSION }}
          
      - name: 📂 Cache Bun dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.bun/install/cache
            node_modules
          key: ${{ runner.os }}-bun-release-${{ hashFiles('**/bun.lockb', '**/package.json') }}
          
      - name: 📥 Install dependencies
        run: bun install --frozen-lockfile

      - name: 🔍 TypeScript Check
        run: bun run typecheck

      - name: 🧪 Run comprehensive tests
        run: bun test --coverage

      - name: 📊 Upload coverage reports
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          fail_ci_if_error: false

      - name: ⚡ Run performance benchmarks
        run: |
          # Create basic performance test
          echo "Running performance benchmarks..."
          bun examples/basic-example.ts
          echo "Performance benchmarks completed"

      - name: 🔍 Audit dependencies
        run: bun audit

      - name: 🏗️ Build project
        run: bun run build

      - name: 🔍 Detect pre-release
        id: prerelease
        run: |
          if [[ "${{ github.ref_name }}" =~ -[a-zA-Z] ]]; then
            echo "is_prerelease=true" >> $GITHUB_OUTPUT
            echo "This is a pre-release version"
          else
            echo "is_prerelease=false" >> $GITHUB_OUTPUT
            echo "This is a stable release"
          fi
        
      - name: 📄 Generate changelog
        id: changelog
        run: |
          if [ ! -f CHANGELOG.md ]; then
            echo "# Changelog" > CHANGELOG.md
            echo "" >> CHANGELOG.md
            echo "## [${{ github.ref_name }}] - $(date +%Y-%m-%d)" >> CHANGELOG.md
            echo "" >> CHANGELOG.md
            echo "### Added" >> CHANGELOG.md
            echo "- Initial release of ECS Game Engine" >> CHANGELOG.md
          fi
          
          # Extract version section from changelog
          VERSION="${{ github.ref_name }}"
          awk "/^## \[${VERSION#v}\]/,/^## \[|^$/{if(!/^## \[${VERSION#v}\]/)print}" CHANGELOG.md > release_notes.md
          
          if [ ! -s release_notes.md ]; then
            echo "### Features" > release_notes.md
            echo "- ECS Game Engine with TypeScript and Bun" >> release_notes.md
            echo "- High-performance entity-component system" >> release_notes.md
            echo "- Archetype-based queries for optimal performance" >> release_notes.md
            echo "- System scheduler with dependency resolution" >> release_notes.md
            echo "- Comprehensive test suite" >> release_notes.md
          fi
          
      - name: 📦 Create release assets
        run: |
          mkdir -p release-assets

          # Create source archive
          tar --exclude='.git' --exclude='node_modules' --exclude='.github' \
              -czf release-assets/source-code.tar.gz .

          # Create distribution archive
          tar -czf release-assets/dist-${{ github.ref_name }}.tar.gz \
              dist/ package.json README.md CHANGELOG.md LICENSE examples/

          # Generate checksums
          cd release-assets
          sha256sum *.tar.gz > checksums.txt
          cd ..

      - name: 🚀 Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.ref_name }}
          name: ${{ steps.prerelease.outputs.is_prerelease == 'true' && format('Pre-release {0}', github.ref_name) || format('Release {0}', github.ref_name) }}
          body_path: release_notes.md
          draft: false
          prerelease: ${{ steps.prerelease.outputs.is_prerelease }}
          generate_release_notes: true
          files: |
            release-assets/*
            dist/**/*

      - name: 📝 Create release summary
        run: |
          echo "## 🎉 Release Summary" >> $GITHUB_STEP_SUMMARY
          echo "- **Version**: ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Type**: ${{ steps.prerelease.outputs.is_prerelease == 'true' && 'Pre-release' || 'Stable Release' }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Build**: ✅ Successful" >> $GITHUB_STEP_SUMMARY
          echo "- **Tests**: ✅ All passed" >> $GITHUB_STEP_SUMMARY
          echo "- **Security**: ✅ Scanned" >> $GITHUB_STEP_SUMMARY

      # Future: NPM publishing when ready
      # - name: 📦 Publish to NPM
      #   if: steps.prerelease.outputs.is_prerelease == 'false'
      #   run: |
      #     echo "//registry.npmjs.org/:_authToken=${{ secrets.NPM_TOKEN }}" > ~/.npmrc
      #     npm publish --access public
      #   env:
      #     NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
      #
      # - name: 📦 Publish pre-release to NPM
      #   if: steps.prerelease.outputs.is_prerelease == 'true'
      #   run: |
      #     echo "//registry.npmjs.org/:_authToken=${{ secrets.NPM_TOKEN }}" > ~/.npmrc
      #     npm publish --access public --tag next
      #   env:
      #     NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}